@using Core.Enums
@using Core.Enums
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using System.Web;
@using X.PagedList.Web.Common;
@model X.PagedList.IPagedList<UI.ViewModels.CourseViewModels.CourseViewModel>
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using BLL.Interfaces
@inject IEducationMaterialService EducationMaterialService

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Your Page Title</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f7f7f7;
        }

        .cover-card:hover {
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            border: #4682B4 1px solid;
        }

        .ui.container {
            margin-top: 20px;
        }

        .add-course-button {
            margin-top: 20px;
            text-align: center;
        }   
        
        #fixedPagination {
            margin-top: 228px;
        }
    </style>
</head>
<body>
<div class="ui container"/>
<div style="display: flex; align-items: center;">
    <h3 class="ui header">Courses</h3>
    <div style="flex-grow: 1; text-align: center;">
        <div class="ui search">
            <form method="get" asp-action="Index" asp-controller="Course" class="ui form inline">
                <div class="ui icon input">
                    <input type="text" name="currentQueryFilter" placeholder="Search..." style="border-radius: 15px; margin-right: 10px;"/>
                    <button type="submit" style="background: none; border: none; padding: 0;">
                        <i class="inverted circular search link icon"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>
    <div class="ui compact menu" style="margin-right: 10px;">
        <div class="ui simple dropdown item">
            Actions
            <i class="dropdown icon"></i>
            <div class="menu">
                @if (User.IsInRole(AppUserRoles.Admin.ToString()))
                {
                    <div class="item">
                        <a asp-action="Create">Add New Course</a>
                    </div>
                }
                @if (!User.IsInRole(AppUserRoles.Student.ToString()))
                {
                    <div class="item">
                        <a asp-action="CreateInGeneral" asp-controller="EducationMaterial">Upload Education Material</a>
                    </div>
                }
                <div class="item">

                    @{
                        var materialsGeneral = await EducationMaterialService.GetAllMaterialByAccessAsync(MaterialAccess.General, SortingParam.UploadTimeDesc);
                        
                        if (materialsGeneral.Data is not null)
                        {
                            var materialIds = string.Join(" ", materialsGeneral.Data.Select(m => m.Id));

                            <a asp-action="IndexMaterials" asp-controller="EducationMaterial" asp-route-materialIds="@materialIds" asp-route-sortOrder="UploadTimeDesc">Education Materials</a>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="ui compact menu" style="margin-left: 10px;">

        <div class="ui simple dropdown item">
            Sort by
            <i class="dropdown icon"></i>
            <div class="menu">
                <div class="item">
                    @if (ViewBag.NameSortParam == SortingParam.Name)
                    {
                        <a href="@Url.Action("Index", "Course", new { sortOrder = ViewBag.NameSortParam, currentQueryFilter = ViewBag.CurrentQueryFilter, currentAccessFilter = ViewBag.CurrentAccessFilter })"><i class="fa fa-arrow-up" aria-hidden="true"></i> Name</a>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Course", new { sortOrder = ViewBag.NameSortParam, currentQueryFilter = ViewBag.CurrentQueryFilter, currentAccessFilter = ViewBag.CurrentAccessFilter })"><i class="fa fa-arrow-down" aria-hidden="true"></i> Name</a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<hr class="ui divider">
<div class="ui stackable three column grid">
    @if (!Model.Any())
    {
        <div class="column">
            <div class="ui warning message">No courses found.</div>
        </div>
    }
    else
    {
        @foreach (var course in Model)
        {
            <div class="column">
                <div class="ui card cover-card">
                    <div class="image">
                        <img src="@course.BackgroundImage.Url" alt="@course.Name" style="height: 170px; object-fit: cover;">
                    </div>
                    <div class="content">
                        <div class="header">@((course.Name.Length > 23) ? $"{course.Name.Substring(0, 20)}..." : course.Name)</div>
                    </div>
                    <div class="extra content">
                        <a href="@Url.Action("Details", new { id = course.Id })" class="ui details-button button">Details</a>
                        @if (User.IsInRole(AppUserRoles.Admin.ToString()))
                        {
                            <div class="ui buttons">
                                <a href="@Url.Action("Edit", new { id = course.Id })" class="ui edit-button button">Edit</a>
                                <div class="or"></div>
                                <a href="@Url.Action("Delete", new { id = course.Id })" class="ui delete-button button">Delete</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

<div class="ui container add-course-button" style="display: flex; justify-content: center; align-items: center;">
    @if (Model.PageCount > 1)
    {
        if (Model.Count <= Model.PageSize / 2)
        {
            <div id="fixedPagination" class="pagination-container">
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                <div>
                    @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page = page, sortOrder = ViewBag.CurrentSort, currentQueryFilter = ViewBag.CurrentQueryFilter }),
                        new PagedListRenderOptions
                        {
                            LiElementClasses = new string[] { "page-item" },
                            PageClasses = new string[] { "page-link" },
                            MaximumPageNumbersToDisplay = 3
                        })
                </div>
            </div>
        }
        else
        {
            <div class="pagination-container">
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                <div>
                    @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page = page, sortOrder = ViewBag.CurrentSort, currentQueryFilter = ViewBag.CurrentQueryFilter }),
                        new PagedListRenderOptions
                        {
                            LiElementClasses = new string[] { "page-item" },
                            PageClasses = new string[] { "page-link" },
                            MaximumPageNumbersToDisplay = 3
                        })
                </div>
            </div>
        }
    }
</div>

@if (TempData["Error"] != null)
{
    <div class="ui negative message">
        <p><b>Sorry!</b> - @TempData["Error"]</p>
    </div>
}
</body>
</html>

<script>
    document.querySelectorAll('.ui.card').forEach(card => {
        card.addEventListener('click', function () {
            window.location.href = this.querySelector('.ui.details-button.button').href;
        });
    });
</script>